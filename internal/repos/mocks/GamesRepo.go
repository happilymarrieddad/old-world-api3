// Code generated by MockGen. DO NOT EDIT.
// Source: ./games.go
//
// Generated by this command:
//
//	mockgen -source=./games.go -destination=./mocks/GamesRepo.go -package=mock_repos GamesRepo
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	reflect "reflect"

	types "github.com/happilymarrieddad/old-world/api3/types"
	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockGamesRepo is a mock of GamesRepo interface.
type MockGamesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGamesRepoMockRecorder
}

// MockGamesRepoMockRecorder is the mock recorder for MockGamesRepo.
type MockGamesRepoMockRecorder struct {
	mock *MockGamesRepo
}

// NewMockGamesRepo creates a new mock instance.
func NewMockGamesRepo(ctrl *gomock.Controller) *MockGamesRepo {
	mock := &MockGamesRepo{ctrl: ctrl}
	mock.recorder = &MockGamesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGamesRepo) EXPECT() *MockGamesRepoMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockGamesRepo) Find(ctx context.Context, limit, offset int) ([]*types.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, limit, offset)
	ret0, _ := ret[0].([]*types.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockGamesRepoMockRecorder) Find(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGamesRepo)(nil).Find), ctx, limit, offset)
}

// FindOrCreate mocks base method.
func (m *MockGamesRepo) FindOrCreate(ctx context.Context, name string) (*types.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreate", ctx, name)
	ret0, _ := ret[0].(*types.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreate indicates an expected call of FindOrCreate.
func (mr *MockGamesRepoMockRecorder) FindOrCreate(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreate", reflect.TypeOf((*MockGamesRepo)(nil).FindOrCreate), ctx, name)
}

// Update mocks base method.
func (m *MockGamesRepo) Update(ctx context.Context, gm types.UpdateGame) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, gm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGamesRepoMockRecorder) Update(ctx, gm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGamesRepo)(nil).Update), ctx, gm)
}

// UpdateTx mocks base method.
func (m *MockGamesRepo) UpdateTx(ctx context.Context, tx neo4j.ManagedTransaction, gm types.UpdateGame) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", ctx, tx, gm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockGamesRepoMockRecorder) UpdateTx(ctx, tx, gm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockGamesRepo)(nil).UpdateTx), ctx, tx, gm)
}

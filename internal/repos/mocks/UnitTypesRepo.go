// Code generated by MockGen. DO NOT EDIT.
// Source: ./unitTypes.go
//
// Generated by this command:
//
//	mockgen -source=./unitTypes.go -destination=./mocks/UnitTypesRepo.go -package=mock_repos UnitTypesRepo
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	context "context"
	reflect "reflect"

	repos "github.com/happilymarrieddad/old-world/api3/internal/repos"
	types "github.com/happilymarrieddad/old-world/api3/types"
	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockUnitTypesRepo is a mock of UnitTypesRepo interface.
type MockUnitTypesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUnitTypesRepoMockRecorder
}

// MockUnitTypesRepoMockRecorder is the mock recorder for MockUnitTypesRepo.
type MockUnitTypesRepoMockRecorder struct {
	mock *MockUnitTypesRepo
}

// NewMockUnitTypesRepo creates a new mock instance.
func NewMockUnitTypesRepo(ctrl *gomock.Controller) *MockUnitTypesRepo {
	mock := &MockUnitTypesRepo{ctrl: ctrl}
	mock.recorder = &MockUnitTypesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitTypesRepo) EXPECT() *MockUnitTypesRepoMockRecorder {
	return m.recorder
}

// EnsureChildUnitTypeExists mocks base method.
func (m *MockUnitTypesRepo) EnsureChildUnitTypeExists(ctx context.Context, ncut types.CreateChildUnitType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureChildUnitTypeExists", ctx, ncut)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureChildUnitTypeExists indicates an expected call of EnsureChildUnitTypeExists.
func (mr *MockUnitTypesRepoMockRecorder) EnsureChildUnitTypeExists(ctx, ncut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureChildUnitTypeExists", reflect.TypeOf((*MockUnitTypesRepo)(nil).EnsureChildUnitTypeExists), ctx, ncut)
}

// EnsureChildUnitTypeExistsTx mocks base method.
func (m *MockUnitTypesRepo) EnsureChildUnitTypeExistsTx(ctx context.Context, tx neo4j.ManagedTransaction, ncut types.CreateChildUnitType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureChildUnitTypeExistsTx", ctx, tx, ncut)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureChildUnitTypeExistsTx indicates an expected call of EnsureChildUnitTypeExistsTx.
func (mr *MockUnitTypesRepoMockRecorder) EnsureChildUnitTypeExistsTx(ctx, tx, ncut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureChildUnitTypeExistsTx", reflect.TypeOf((*MockUnitTypesRepo)(nil).EnsureChildUnitTypeExistsTx), ctx, tx, ncut)
}

// Find mocks base method.
func (m *MockUnitTypesRepo) Find(ctx context.Context, opts *repos.FindUnitTypesOpts) ([]*types.UnitType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, opts)
	ret0, _ := ret[0].([]*types.UnitType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUnitTypesRepoMockRecorder) Find(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUnitTypesRepo)(nil).Find), ctx, opts)
}

// FindOrCreate mocks base method.
func (m *MockUnitTypesRepo) FindOrCreate(ctx context.Context, at types.CreateUnitType) (*types.UnitType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreate", ctx, at)
	ret0, _ := ret[0].(*types.UnitType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreate indicates an expected call of FindOrCreate.
func (mr *MockUnitTypesRepoMockRecorder) FindOrCreate(ctx, at any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreate", reflect.TypeOf((*MockUnitTypesRepo)(nil).FindOrCreate), ctx, at)
}

// FindTx mocks base method.
func (m *MockUnitTypesRepo) FindTx(ctx context.Context, tx neo4j.ManagedTransaction, opts *repos.FindUnitTypesOpts) ([]*types.UnitType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTx", ctx, tx, opts)
	ret0, _ := ret[0].([]*types.UnitType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTx indicates an expected call of FindTx.
func (mr *MockUnitTypesRepoMockRecorder) FindTx(ctx, tx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTx", reflect.TypeOf((*MockUnitTypesRepo)(nil).FindTx), ctx, tx, opts)
}

// Get mocks base method.
func (m *MockUnitTypesRepo) Get(ctx context.Context, id string) (*types.UnitType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*types.UnitType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUnitTypesRepoMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUnitTypesRepo)(nil).Get), ctx, id)
}

// GetTx mocks base method.
func (m *MockUnitTypesRepo) GetTx(ctx context.Context, tx neo4j.ManagedTransaction, id string) (*types.UnitType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", ctx, tx, id)
	ret0, _ := ret[0].(*types.UnitType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx.
func (mr *MockUnitTypesRepoMockRecorder) GetTx(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockUnitTypesRepo)(nil).GetTx), ctx, tx, id)
}

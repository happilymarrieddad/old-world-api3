// Code generated by MockGen. DO NOT EDIT.
// Source: ./globalRepo.go
//
// Generated by this command:
//
//	mockgen -source=./globalRepo.go -destination=./mocks/GlobalRepo.go -package=mock_repos GlobalRepo
//

// Package mock_repos is a generated GoMock package.
package mock_repos

import (
	reflect "reflect"

	repos "github.com/happilymarrieddad/old-world/api3/internal/repos"
	neo4j "github.com/neo4j/neo4j-go-driver/v5/neo4j"
	gomock "go.uber.org/mock/gomock"
)

// MockGlobalRepo is a mock of GlobalRepo interface.
type MockGlobalRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGlobalRepoMockRecorder
}

// MockGlobalRepoMockRecorder is the mock recorder for MockGlobalRepo.
type MockGlobalRepoMockRecorder struct {
	mock *MockGlobalRepo
}

// NewMockGlobalRepo creates a new mock instance.
func NewMockGlobalRepo(ctrl *gomock.Controller) *MockGlobalRepo {
	mock := &MockGlobalRepo{ctrl: ctrl}
	mock.recorder = &MockGlobalRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlobalRepo) EXPECT() *MockGlobalRepoMockRecorder {
	return m.recorder
}

// ArmyTypes mocks base method.
func (m *MockGlobalRepo) ArmyTypes() repos.ArmyTypesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArmyTypes")
	ret0, _ := ret[0].(repos.ArmyTypesRepo)
	return ret0
}

// ArmyTypes indicates an expected call of ArmyTypes.
func (mr *MockGlobalRepoMockRecorder) ArmyTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArmyTypes", reflect.TypeOf((*MockGlobalRepo)(nil).ArmyTypes))
}

// CompositionTypes mocks base method.
func (m *MockGlobalRepo) CompositionTypes() repos.CompositionTypesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompositionTypes")
	ret0, _ := ret[0].(repos.CompositionTypesRepo)
	return ret0
}

// CompositionTypes indicates an expected call of CompositionTypes.
func (mr *MockGlobalRepoMockRecorder) CompositionTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompositionTypes", reflect.TypeOf((*MockGlobalRepo)(nil).CompositionTypes))
}

// DB mocks base method.
func (m *MockGlobalRepo) DB() neo4j.DriverWithContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(neo4j.DriverWithContext)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockGlobalRepoMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockGlobalRepo)(nil).DB))
}

// Games mocks base method.
func (m *MockGlobalRepo) Games() repos.GamesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Games")
	ret0, _ := ret[0].(repos.GamesRepo)
	return ret0
}

// Games indicates an expected call of Games.
func (mr *MockGlobalRepoMockRecorder) Games() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Games", reflect.TypeOf((*MockGlobalRepo)(nil).Games))
}

// ItemTypes mocks base method.
func (m *MockGlobalRepo) ItemTypes() repos.ItemTypesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemTypes")
	ret0, _ := ret[0].(repos.ItemTypesRepo)
	return ret0
}

// ItemTypes indicates an expected call of ItemTypes.
func (mr *MockGlobalRepoMockRecorder) ItemTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemTypes", reflect.TypeOf((*MockGlobalRepo)(nil).ItemTypes))
}

// Items mocks base method.
func (m *MockGlobalRepo) Items() repos.ItemsRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Items")
	ret0, _ := ret[0].(repos.ItemsRepo)
	return ret0
}

// Items indicates an expected call of Items.
func (mr *MockGlobalRepoMockRecorder) Items() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Items", reflect.TypeOf((*MockGlobalRepo)(nil).Items))
}

// Statistics mocks base method.
func (m *MockGlobalRepo) Statistics() repos.StatisticsRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics")
	ret0, _ := ret[0].(repos.StatisticsRepo)
	return ret0
}

// Statistics indicates an expected call of Statistics.
func (mr *MockGlobalRepoMockRecorder) Statistics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockGlobalRepo)(nil).Statistics))
}

// TroopTypes mocks base method.
func (m *MockGlobalRepo) TroopTypes() repos.TroopTypesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TroopTypes")
	ret0, _ := ret[0].(repos.TroopTypesRepo)
	return ret0
}

// TroopTypes indicates an expected call of TroopTypes.
func (mr *MockGlobalRepoMockRecorder) TroopTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TroopTypes", reflect.TypeOf((*MockGlobalRepo)(nil).TroopTypes))
}

// UnitOptionTypes mocks base method.
func (m *MockGlobalRepo) UnitOptionTypes() repos.UnitOptionTypesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitOptionTypes")
	ret0, _ := ret[0].(repos.UnitOptionTypesRepo)
	return ret0
}

// UnitOptionTypes indicates an expected call of UnitOptionTypes.
func (mr *MockGlobalRepoMockRecorder) UnitOptionTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitOptionTypes", reflect.TypeOf((*MockGlobalRepo)(nil).UnitOptionTypes))
}

// UnitTypes mocks base method.
func (m *MockGlobalRepo) UnitTypes() repos.UnitTypesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitTypes")
	ret0, _ := ret[0].(repos.UnitTypesRepo)
	return ret0
}

// UnitTypes indicates an expected call of UnitTypes.
func (mr *MockGlobalRepoMockRecorder) UnitTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitTypes", reflect.TypeOf((*MockGlobalRepo)(nil).UnitTypes))
}

// UserArmies mocks base method.
func (m *MockGlobalRepo) UserArmies() repos.UserArmiesRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserArmies")
	ret0, _ := ret[0].(repos.UserArmiesRepo)
	return ret0
}

// UserArmies indicates an expected call of UserArmies.
func (mr *MockGlobalRepoMockRecorder) UserArmies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserArmies", reflect.TypeOf((*MockGlobalRepo)(nil).UserArmies))
}

// Users mocks base method.
func (m *MockGlobalRepo) Users() repos.UsersRepo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users")
	ret0, _ := ret[0].(repos.UsersRepo)
	return ret0
}

// Users indicates an expected call of Users.
func (mr *MockGlobalRepoMockRecorder) Users() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockGlobalRepo)(nil).Users))
}

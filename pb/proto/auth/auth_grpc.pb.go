// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/auth/auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	V1Auth_Login_FullMethodName    = "/auth.V1Auth/Login"
	V1Auth_Validate_FullMethodName = "/auth.V1Auth/Validate"
	V1Auth_Refresh_FullMethodName  = "/auth.V1Auth/Refresh"
)

// V1AuthClient is the client API for V1Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type V1AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	Validate(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	Refresh(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*LoginReply, error)
}

type v1AuthClient struct {
	cc grpc.ClientConnInterface
}

func NewV1AuthClient(cc grpc.ClientConnInterface) V1AuthClient {
	return &v1AuthClient{cc}
}

func (c *v1AuthClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, V1Auth_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AuthClient) Validate(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, V1Auth_Validate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1AuthClient) Refresh(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, V1Auth_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1AuthServer is the server API for V1Auth service.
// All implementations must embed UnimplementedV1AuthServer
// for forward compatibility
type V1AuthServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Validate(context.Context, *JWTRequest) (*EmptyReply, error)
	Refresh(context.Context, *JWTRequest) (*LoginReply, error)
	mustEmbedUnimplementedV1AuthServer()
}

// UnimplementedV1AuthServer must be embedded to have forward compatible implementations.
type UnimplementedV1AuthServer struct {
}

func (UnimplementedV1AuthServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedV1AuthServer) Validate(context.Context, *JWTRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedV1AuthServer) Refresh(context.Context, *JWTRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedV1AuthServer) mustEmbedUnimplementedV1AuthServer() {}

// UnsafeV1AuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to V1AuthServer will
// result in compilation errors.
type UnsafeV1AuthServer interface {
	mustEmbedUnimplementedV1AuthServer()
}

func RegisterV1AuthServer(s grpc.ServiceRegistrar, srv V1AuthServer) {
	s.RegisterService(&V1Auth_ServiceDesc, srv)
}

func _V1Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Auth_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AuthServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Auth_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1AuthServer).Validate(ctx, req.(*JWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1Auth_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1AuthServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: V1Auth_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1AuthServer).Refresh(ctx, req.(*JWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// V1Auth_ServiceDesc is the grpc.ServiceDesc for V1Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var V1Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.V1Auth",
	HandlerType: (*V1AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _V1Auth_Login_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _V1Auth_Validate_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _V1Auth_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth/auth.proto",
}
